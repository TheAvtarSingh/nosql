Collections

{
key : value
key : [v1,v2,v3]
key : {key : value , key,[]}
key : [{k:v},{k:v}]
}

db.createCollection("name");



//Simple Collection 
> show dbs;
admin            0.000GB
config           0.000GB
local            0.000GB
ncu_db           0.000GB
ncu_db_practice  0.000GB
> use shopapp;
switched to db shopapp
> show collections;
> db.createCollection("products");
{ "ok" : 1 }
> show collections;
products
>


db.createCollection("name",options);
Capped Collection - used to restict data
capped: true,
size : int(bytes) //size of collection ( in size : 5 , if 6th is inserted then 1st will be deleted)
max : int, // max documnets allowed in our collection ( in max : 5 , if 6th is inserted then 1st will be deleted)
AutoIndexId: automaticallly creates index on id field


Data Types
BSON : https://www.mongodb.com/docs/manual/reference/bson-types/
Note : Datatype of _id : ObjectId();

For Number : Only Double ( it will complete by own)
45.00 == 45
45.55 == 45.55

boolean
null
array
string
minkey
maxkey


CRUD - Crete , Read , Update and Delete

CREATE : 
insertOne,insertMany
Read :
find(),findOne()
Update : 
updateOne(),updateMany(),replace
Delete :
deleteOne(),deleteMany()

//Inserting Query 
db.products.insertMany([
    {
        "p_name" : "Apple Iphone 13",
        "p_price" : 80000,
        "p_brand" : "Apple",
        "p_category" : "Mobile",
        "p_details" : {
            "ram" : ["4 GB","8 GB", "16 GB"],
            "memory" : ["64 GB", "128 GB"],
            "color" : ["white", "gray", "silver", "gold"]
        },
        "discount" : 5
    },

    {
        "p_name" : "Apple Macbook Pro",
        "p_price" : 150000,
        "p_brand" : "Apple",
        "p_category" : "Laptop",
        "p_details" : {
            "ram" : ["8 GB", "16 GB", "32 GB"],
            "memory" : ["256 GB", "512 GB"],
            "color" : ["gray", "silver"]
        }
    },

    {
        "p_name" : "Adidas Shoes",
        "p_price" : 4000,
        "p_brand" : "Adidas",
        "p_category" : "Shoes",
        "p_details" : {
            "size" : [7,8,9,10],
            "color" : ["white", "gray", "black", "red"]
        },
        "discount" : 3,
        "offers" : ["offer_1", "offer_2", "offer_3"]
    },

    {
        "p_name" : "Puma Shoes",
        "p_price" : 3500,
        "p_brand" : "Puma",
        "p_category" : "Shoes",
        "p_details" : {
            "size" : [7,8,9,10],
            "color" : ["white", "gray", "black"]
        },
        "discount" : 5,
        "offers" : ["offer_1", "offer_2", "offer_3"]
    },

    {
        "p_name" : "Titan Smart Watch",
        "p_price" : 8000,
        "p_brand" : "Titan",
        "p_category" : "Watch",
        "p_details" : {
            "features" : ["heartbeat", "steps", "calories", "BMI"],
            "color" : ["white", "gray", "silver", "black", "pink"]
        },
        "discount" : 5
    }
]);

Update -- Only Update First One
> db.products.update({"p_brand":"Apple"},{$set : {"discount" : 3}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
Update --  With No arguement -- Update All
> db.products.update({},{$set : {"discount" : 4}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

Or Use 

updateMany - - Update all occurences
> db.products.updateMany({"p_brand" : "Apple"},{$set : {"rating" : 4.5}});
{ "acknowledged" : true, "matchedCount" : 2, "modifiedCount" : 1 }
> db.products.find().pretty();

DeleteOne() -- db.products.deleteOne({"p_brand" : "Titan"}; // delete First Occurance
Similarly - DeleteMany() for Multiple Deletes

Operators
1. Projection Operators 
-- $,$elemMatch ,$meta,$slice
( db.products.find({"p_brand":"Apple"},{"p_name:1","p_price":1}).pretty(); )
> db.products.find({"p_brand":"Apple"},{"p_name":1,"p_price":1,_id:0,"p_details.color":1}).pretty();
Array
> db.products.findOne({"p_brand":"Puma"}).offers;
[ "offer_1", "offer_2", "offer_3" ]

> db.products.findOne({"p_brand":"Puma"}).offers[1];
offer_2

> db.products.findOne({"p_brand":"Puma"}).p_details.size;
[ 7, 8, 9, 10 ]


2. Comparision
-- $eq,ne,gt,gte,lt,lte,in,nin

--eq
> db.products.find({"p_brand":{$eq:"Apple"}},{"p_name":1,"p_price":1,_id:0,"p_de
tails.color":1}).pretty();
ne :
> db.products.find({"p_brand":{$ne:"Apple"}},{"p_name":1,"p_price":1,_id:0,"p_de
tails.color":1}).pretty();
gt
> db.products.find({"p_price":{$gt:5000}},{"p_name":1,"p_price":1,_id:0,"p_detai
ls.color":1}).pretty();
--le
> db.products.find({"p_price":{$lt:5000}},{"p_name":1,"p_price":1,_id:0,"p_detai
ls.color":1}).pretty();

--in (we just have to pass an array with values not every time key)
(Filter Multiple)
> db.products.find({"p_brand":{$in:["Puma","Apple"]}},{"p_name":1,"p_price":1,_i
d:0,"p_details.color":1}).pretty();
//Inside array 
> db.products.find({"p_details.color":{$in:["red"]}},{"p_name":1,"p_price":1,_id
:0,"p_details.color":1}).pretty();
//Works as $OR
> db.products.find({"p_details.color":{$in:["white","red"]}},{"p_name":1,"p_pric
e":1,_id:0,"p_details.color":1}).pretty();


--nin 
> db.products.find({"p_details.color":{$nin:["white","red"]}},{"p_name":1,"p_pri
ce":1,_id:0,"p_details.color":1}).pretty();

Note : Condition On aArray : not works as details.size


3. Logical
-- $and , or ,not , nor
--or
> db.products.find({$or:[{"p_brand":"Apple"},{p_price:{$lt:10000}}]},{"p_name":1,"p_price":1,"p_brand":1}).pretty();
--and 
> db.products.find({$and:[{"p_brand":"Apple"},{p_price:{$gt:10000}}]},{"p_name":
1,"p_price":1,"p_brand":1}).pretty();
--Nor
> db.products.find({$nor:[{"p_brand":"Apple"},{p_price:{$gt:10000}}]},{"p_name":
1,"p_price":1,"p_brand":1}).pretty();

--Not (We use nin in this case)
> db.products.find({$not:[{"p_brand":"Apple"},{p_price:{$gt:10000}}]},{"p_name":
1,"p_price":1,"p_brand":1}).pretty();
Error: error: {
        "ok" : 0,
        "errmsg" : "unknown top level operator: $not",
        "code" : 2,
        "codeName" : "BadValue"
        
4. Element
-- $exists,type
5. Evaluation
-- $expr (regix) , regex,text,mod,where


----- .skip() - To skip some results
----- .limit() - to limit the results
